<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>&gt;ethmcc</title><link>https://ethmcc.github.io/</link><description></description><lastBuildDate>Tue, 27 Sep 2022 00:00:00 -0400</lastBuildDate><item><title>On Homoiconicity</title><link>https://ethmcc.github.io/homoiconicity</link><description>&lt;p&gt;Recently I wanted to use the word &lt;em&gt;homoiconic&lt;/em&gt; to describe 
a design feature. I have my own idea of what meaning is 
conveyed by the word, but decided I should probably look up 
modern usage to see what meaning others might take from it. &lt;/p&gt;
&lt;p&gt;I encountered a lot of arguments …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Tue, 27 Sep 2022 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2022-09-27:/homoiconicity</guid><category>programming</category><category>design</category><category>lisp</category><category>unix</category></item><item><title>On Automated Testing</title><link>https://ethmcc.github.io/automated-testing</link><description>&lt;h2&gt;What is automated testing?&lt;/h2&gt;
&lt;p&gt;I've encountered many different opinions about automated software testing. 
What it is, how it should be done, and often impressions of where it is
or is not applicable. As with many subject within software development, these 
impressions on the subject of testing carry a lot of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Mon, 01 Aug 2022 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2022-08-01:/automated-testing</guid><category>programming</category><category>testing</category><category>design</category><category>software</category></item><item><title>A Definition of Architecture</title><link>https://ethmcc.github.io/brooks-architecture</link><description>&lt;p&gt;Brooks gives the following definition of software system &lt;em&gt;architecture&lt;/em&gt; 
in his classic book &lt;em&gt;The Mythical Man Month&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By the &lt;em&gt;architecture&lt;/em&gt; of a system, I mean the complete and detailed specification of the user interface.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These days, user interfaces are collections of dropdowns, buttons, form fields, and styling choices. We'd hardly …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Sat, 16 Jul 2022 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2022-07-16:/brooks-architecture</guid><category>programming</category><category>design</category><category>software</category></item><item><title>Python and JavaScript performance</title><link>https://ethmcc.github.io/python-js-tracing-jit</link><description>&lt;p&gt;I came across &lt;a href="https://youtu.be/3PcIJKd1PKU"&gt;a cheeky little demonstration&lt;/a&gt; on YouTube comparing the same algorithm written in Python, C, and x86 assembly.&lt;/p&gt;
&lt;p&gt;It compares the following pessimal C code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;isPrime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Wed, 15 Dec 2021 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2021-12-15:/python-js-tracing-jit</guid><category>programming</category><category>javascript</category><category>python</category><category>node</category><category>pypy</category><category>v8</category><category>jit</category></item><item><title>Pomoduino time-management clock</title><link>https://ethmcc.github.io/pomoduino</link><description>&lt;p class="first last"&gt;I built a pomodoro timer for Arduino-compatible microcontrollers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Sun, 28 Mar 2021 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2021-03-28:/pomoduino</guid><category>programming</category><category>arduino</category><category>microcontrollers</category><category>embeded systems</category><category>c++</category><category>project</category></item><item><title>Weather Journal</title><link>https://ethmcc.github.io/weather</link><description>&lt;p class="first last"&gt;I wrote an Android application for keeping a journal of local weather conditions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Sun, 20 Dec 2020 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-12-20:/weather</guid><category>programming</category><category>android</category><category>mobile development</category><category>project</category></item><item><title>A JavaScript Quine, and the recursion theorem</title><link>https://ethmcc.github.io/a-javascript-quine</link><description>&lt;p&gt;I saw the following JavaScript quine (&lt;em&gt;modern&lt;/em&gt; JavaScript: ES6 and up) presented in &lt;a href="https://youtu.be/6avJHaC3C2U?t=1802"&gt;Dylan Beatie's talk at NDC London 2020&lt;/a&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="sb"&gt;`$=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;;$()`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The same approach can be rendered with a few more parentheses as an &lt;a href="https://duckduckgo.com/?q=!ducky+IIFE"&gt;IIFE&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;()=&amp;gt;&lt;/span&gt;&lt;span class="sb"&gt;`($=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;)()`&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Either way, although this quine is brilliantly short, it's actually fairly easily parseable at sight …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Thu, 20 Aug 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-08-20:/a-javascript-quine</guid><category>mathematics</category><category>javascript</category><category>mathematics</category></item><item><title>SQL Murder Mystery</title><link>https://ethmcc.github.io/sql-murder-mystery</link><description>&lt;p&gt;Northwestern's Knight Labs has a fun little diversion for practicing your SQL commands.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A crime has taken place and the detective needs your help. The detective gave you the crime scene report, but you somehow lost it. You vaguely remember that the crime was a ​murder​ that occurred sometime on …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Sat, 01 Aug 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-08-01:/sql-murder-mystery</guid><category>programming</category><category>sql</category><category>databases</category></item><item><title>Flipping words in Haskell</title><link>https://ethmcc.github.io/flip-words-kata-haskell</link><description>&lt;p&gt;The following was a very simple programming kata I ran through in Haskell and had fun with. It lends itself to a very natural solution with Monads.&lt;/p&gt;
&lt;p&gt;I didn't see any other submission that took a monadic approach to this problem at all, so I thought I'd share. Here's the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Thu, 30 Jul 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-07-30:/flip-words-kata-haskell</guid><category>programming</category><category>haskell</category><category>monads</category><category>katas</category><category>functional programming</category></item><item><title>Lambdas and anonymous functions in JavaScript</title><link>https://ethmcc.github.io/javascript-lambda-anonymous</link><description>&lt;p&gt;There's a lot of confusion in the JavaScript community around the term “lambda”. &lt;/p&gt;
&lt;p&gt;I'll eschew pointing to any particular examples, as they can get pretty heated. 
It all revolves around the terms "lambda expression" (or "lambda", for short), a 
term which originated in the mathematical side of computer science, and …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Wed, 08 Jul 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-07-08:/javascript-lambda-anonymous</guid><category>programming</category><category>javascript</category><category>lambda expressions</category><category>anonymous functions</category></item><item><title>Representing Sudoku variants as set multicover problems</title><link>https://ethmcc.github.io/sudoku-multicover</link><description>&lt;p&gt;In previous posts, I introduced &lt;a href="../miracle-sudoku"&gt;the Miracle Sudoku&lt;/a&gt; variant and &lt;a href="../sudoku"&gt;my variant sudoku solver package&lt;/a&gt;, which I used for enumerating solutions to that variant. I also explained &lt;a href="../dancing-links"&gt;the algorithm that package uses&lt;/a&gt; for solving set-multicover problems: Knuth's &lt;em&gt;dancing links&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;In this post, I'll quickly explain how Sudoku problems can be …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Sat, 23 May 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-05-23:/sudoku-multicover</guid><category>programming</category><category>sudoku</category><category>exact cover</category><category>project</category></item><item><title>A Dancing Links implementation for set multicover</title><link>https://ethmcc.github.io/dancing-links</link><description>&lt;p&gt;In my previous posts &lt;a href="../miracle-sudoku"&gt;on Miracle Sudoku&lt;/a&gt; and &lt;a href="../sudoku"&gt;on my variant sudoku solver package&lt;/a&gt;, I mentioned implementing Knuth's dancing links algorithm for set multicover problems. &lt;/p&gt;
&lt;p&gt;At its heart, the algorithm is a straightforward depth-first search, but which exploits the structure of a set multicover problem to efficiently eliminate branches of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Wed, 20 May 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-05-20:/dancing-links</guid><category>programming</category><category>python</category><category>sudoku</category><category>exact cover</category><category>project</category></item><item><title>A variant sudoku solver</title><link>https://ethmcc.github.io/sudoku</link><description>&lt;p&gt;In &lt;a href="../miracle-sudoku"&gt;a previous post&lt;/a&gt;, I enumerated the solutions to a recently-introduced variant sudoku called &lt;em&gt;Miracle Sudoku&lt;/em&gt;, which combines several chess-sudoku constraints together with an adjacency constraint. &lt;/p&gt;
&lt;p&gt;In this post, I'll demonstrate the variant sudoku library I wrote to produce those counts.&lt;/p&gt;
&lt;p&gt;The set &lt;code&gt;multicover&lt;/code&gt; module, with the dancing links implementation …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Mon, 18 May 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-05-18:/sudoku</guid><category>programming</category><category>python</category><category>sudoku</category><category>exact cover</category><category>project</category></item><item><title>Starting with pyenv-virtualenv in macOS</title><link>https://ethmcc.github.io/pyenv-virtualenv</link><description>&lt;p&gt;There are a few plugins and programs available to support development in virtual environments with Python in macOS, but I've had most success with a combination of &lt;code&gt;pyenv&lt;/code&gt; and &lt;code&gt;pyenv-virtualenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's the approach I take. I'll assume you have &lt;code&gt;Homebrew&lt;/code&gt; installed on your system and are running &lt;code&gt;zsh&lt;/code&gt; for your …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Wed, 13 May 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-05-13:/pyenv-virtualenv</guid><category>programming</category><category>development</category><category>environments</category><category>python</category></item><item><title>On Miracle Sudoku</title><link>https://ethmcc.github.io/miracle-sudoku</link><description>&lt;p&gt;The Miracle Sudoku was introduced by Mitchell Lee, 
who gave a board containing only two given digits, a 1 and a 2.&lt;/p&gt;
&lt;p&gt;I was introduced to this Sudoku variant (and Lee’s board) by 
Simon Anthony of Cracking the Cryptic: &lt;a href="https://www.youtube.com/watch?v=yKf9aUIxdb4" rel="external"&gt;https://www.youtube.com/watch?v=yKf9aUIxdb4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sudoku and Chess …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Mon, 11 May 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-05-11:/miracle-sudoku</guid><category>mathematics</category><category>sudoku</category><category>exact cover</category><category>project</category></item></channel></rss>