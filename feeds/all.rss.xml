<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>&gt;ethmcc</title><link>https://ethmcc.github.io/</link><description></description><lastBuildDate>Wed, 15 Dec 2021 00:00:00 -0500</lastBuildDate><item><title>Python and JavaScript performance</title><link>https://ethmcc.github.io/python-js-tracing-jit</link><description>&lt;p&gt;I came across &lt;a href="https://youtu.be/3PcIJKd1PKU"&gt;a cheeky little demonstration&lt;/a&gt; on YouTube comparing the same algorithm written in Python, C, and x86 assembly.&lt;/p&gt;
&lt;p&gt;It compares the following pessimal C code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;isPrime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Wed, 15 Dec 2021 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2021-12-15:/python-js-tracing-jit</guid><category>programming, python, javascript</category><category>javascript</category><category>python</category><category>node</category><category>pypy</category><category>v8</category><category>jit</category><category>programming</category></item><item><title>Pomoduino time-management clock</title><link>https://ethmcc.github.io/pomoduino</link><description>&lt;p&gt;I built a Pomodoro timer out of a microcontroller and a 16-pin LCD.&lt;/p&gt;
&lt;div class="figure" style="width: 50%"&gt;
&lt;img alt="Start the timer by pressing the button." src="https://ethmcc.github.io/images/pomodoro_demo_1.jpg" /&gt;
&lt;p class="caption"&gt;Start the timer by pressing the button.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The Pomodoro time-management technique uses sets of four &amp;quot;Pomodoro&amp;quot; work intervals, so-named after the tomato-shaped kitchen timer used by its inventor, Francesco Cirillo.&lt;/p&gt;
&lt;p&gt;Each Pomodoro interval is a 25-minute period …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Sun, 28 Mar 2021 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2021-03-28:/pomoduino</guid><category>programming</category><category>arduino</category><category>microcontrollers</category><category>embeded systems</category><category>c++</category></item><item><title>Weather Journal</title><link>https://ethmcc.github.io/weather</link><description>&lt;p&gt;I wrote an Android application for keeping a journal on the local weather.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Keep a daily Weather Journal! Grab the local weather report for your location and write a little bit each day." src="https://ethmcc.github.io/images/weather_demo_1.png" /&gt;
&lt;/div&gt;
&lt;p&gt;Getting in the practice of writing a bit daily can be a helpful grounding exercise. Weather Journal is a native Android application, written in Java, with the simple premise of being a place to go each day …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Sun, 20 Dec 2020 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-12-20:/weather</guid><category>programming</category><category>android</category><category>mobile development</category></item><item><title>A JavaScript Quine, and the recursion theorem</title><link>https://ethmcc.github.io/a-javascript-quine</link><description>&lt;p&gt;I saw the following JavaScript quine (&lt;em&gt;modern&lt;/em&gt; JavaScript: ES6 and up) presented in &lt;a href="https://youtu.be/6avJHaC3C2U?t=1802"&gt;Dylan Beatie's talk at NDC London 2020&lt;/a&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="sb"&gt;`$=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;;$()`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The same approach can be rendered with a few more parentheses as an &lt;a href="https://duckduckgo.com/?q=!ducky+IIFE"&gt;IIFE&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;()=&amp;gt;&lt;/span&gt;&lt;span class="sb"&gt;`($=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;)()`&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Either way, although this quine is brilliantly short, it's actually fairly easily parseable at sight …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Thu, 20 Aug 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-08-20:/a-javascript-quine</guid><category>programming, mathematics, javascript</category><category>javascript</category><category>programming</category><category>mathematics</category></item><item><title>SQL Murder Mystery</title><link>https://ethmcc.github.io/sql-murder-mystery</link><description>&lt;p&gt;Northwestern's Knight Labs has a fun little diversion for practicing your SQL commands.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A crime has taken place and the detective needs your help. The detective gave you the crime scene report, but you somehow lost it. You vaguely remember that the crime was a ​murder​ that occurred sometime on …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Sat, 01 Aug 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-08-01:/sql-murder-mystery</guid><category>programming, databases</category><category>sql</category><category>sql-lite</category><category>programming</category></item><item><title>Flipping words in Haskell</title><link>https://ethmcc.github.io/flip-words-kata-haskell</link><description>&lt;p&gt;The following was a very simple programming kata I ran through in Haskell and had fun with. It lends itself to a very natural solution with Monads.&lt;/p&gt;
&lt;p&gt;I didn't see any other submission that took a monadic approach to this problem at all, so I thought I'd share. Here's the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Thu, 30 Jul 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-07-30:/flip-words-kata-haskell</guid><category>programming, haskell</category><category>haskell</category><category>monads</category><category>programming</category><category>katas</category></item><item><title>Representing Sudoku variants as set multicover problems</title><link>https://ethmcc.github.io/sudoku-multicover</link><description>&lt;p&gt;In previous posts, I introduced &lt;a href="../miracle-sudoku"&gt;the Miracle Sudoku&lt;/a&gt; variant and &lt;a href="../sudoku"&gt;my variant sudoku solver package&lt;/a&gt;, which I used for enumerating solutions to that variant. I also explained &lt;a href="../dancing-links"&gt;the algorithm that package uses&lt;/a&gt; for solving set-multicover problems: Knuth's &lt;em&gt;dancing links&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;In this post, I'll quickly explain how Sudoku problems can be …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Sat, 23 May 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-05-23:/sudoku-multicover</guid><category>programming</category><category>sudoku</category><category>exact cover</category><category>programming</category></item><item><title>A Dancing Links implementation for set multicover</title><link>https://ethmcc.github.io/dancing-links</link><description>&lt;p&gt;In my previous posts &lt;a href="../miracle-sudoku"&gt;on Miracle Sudoku&lt;/a&gt; and &lt;a href="../sudoku"&gt;on my variant sudoku solver package&lt;/a&gt;, I mentioned implementing Knuth's dancing links algorithm for set multicover problems. &lt;/p&gt;
&lt;p&gt;At its heart, the algorithm is a straightforward depth-first search, but which exploits the structure of a set multicover problem to efficiently eliminate branches of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Wed, 20 May 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-05-20:/dancing-links</guid><category>programming</category><category>programming</category><category>python</category><category>sudoku</category><category>exact cover</category></item><item><title>A variant sudoku solver</title><link>https://ethmcc.github.io/sudoku</link><description>&lt;p&gt;In &lt;a href="../miracle-sudoku"&gt;a previous post&lt;/a&gt;, I enumerated the solutions to a recently-introduced variant sudoku called &lt;em&gt;Miracle Sudoku&lt;/em&gt;, which combines several chess-sudoku constraints together with an adjacency constraint. &lt;/p&gt;
&lt;p&gt;In this post, I'll demonstrate the variant sudoku library I wrote to produce those counts.&lt;/p&gt;
&lt;p&gt;The set &lt;code&gt;multicover&lt;/code&gt; module, with the dancing links implementation …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Mon, 18 May 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-05-18:/sudoku</guid><category>programming</category><category>programming</category><category>python</category><category>sudoku</category><category>exact cover</category></item><item><title>Starting with pyenv-virtualenv in macOS</title><link>https://ethmcc.github.io/pyenv-virtualenv</link><description>&lt;p&gt;There are a few plugins and programs available to support development in virtual environments with Python in macOS, but I've had most success with a combination of &lt;code&gt;pyenv&lt;/code&gt; and &lt;code&gt;pyenv-virtualenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's the approach I take. I'll assume you have &lt;code&gt;Homebrew&lt;/code&gt; installed on your system and are running &lt;code&gt;zsh&lt;/code&gt; for your …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Wed, 13 May 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-05-13:/pyenv-virtualenv</guid><category>programming, python</category><category>programming</category><category>python</category><category>environments</category></item><item><title>On Miracle Sudoku</title><link>https://ethmcc.github.io/miracle-sudoku</link><description>&lt;p&gt;The Miracle Sudoku was introduced by Mitchell Lee, who gave a board containing only two given digits, a 1 and a 2.&lt;/p&gt;
&lt;p&gt;I was introduced to this Sudoku variant (and Lee’s board) by Simon Anthony of Cracking the Cryptic: &lt;a href="https://www.youtube.com/watch?v=yKf9aUIxdb4"&gt;https://www.youtube.com/watch?v=yKf9aUIxdb4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sudoku and Chess …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ethan McCarthy</dc:creator><pubDate>Mon, 11 May 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:ethmcc.github.io,2020-05-11:/miracle-sudoku</guid><category>programming</category><category>sudoku</category><category>exact cover</category></item></channel></rss>